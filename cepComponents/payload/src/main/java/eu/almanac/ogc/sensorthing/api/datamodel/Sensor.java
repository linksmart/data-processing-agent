/*
 * OGC SensorThings API - Data Model
 * 
 * Copyright (c) 2015 Dario Bonino
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
package eu.almanac.ogc.sensorthing.api.datamodel;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;

import java.util.HashSet;
import java.util.Set;

/**
 * <strong>Definition:</strong> A sensor is an instrument that can observe a
 * property or phenomenon with the goal of producing an estimate of the value of
 * the property. In some cases, the sensor in this data model can also be seen
 * as the procedure (method, algorithm, or instrument) defined in OGC 07-022r1.
 * 
 * @author <a href="mailto:bonino@ismb.it">Dario Bonino</a>
 *
 */
@Deprecated
public class Sensor extends OGCSensorThingsAPIDataModelEntry
{
	/**
	 * The detailed description of the sensor or system. The content is open to
	 * accommodate changes to SensorML or to support other description
	 * languages.
	 */
	@JsonPropertyDescription("The detailed description of the sensor or system. The content is open to accommodate changes to SensorML or to support other description languages.")
	@JsonProperty(value = "Metadata")
	private String metadata;
	
	/**
	 * An observation is performed by one and only one sensor. One sensor could
	 * produce zero to many events.
	 */
	@JsonProperty(value = "Observations")
	private Set<Observation> observations;
	
	/**
	 * Empty class constructor, respects the bean instantiation pattern
	 */
	public Sensor()
	{
		// common initialization task
		this.initCommon();
	}
	
	/**
	 * Builds a new Sensor instance described by the given metadata.
	 * 
	 * @param metadata
	 *            The detailed description of the sensor or system. The content
	 *            is open to accommodate changes to SensorML or to support other
	 *            description languages.
	 */
	public Sensor(String metadata)
	{
		// store the metadata
		this.metadata = metadata;
	}
	
	/**
	 * Performs common initialization tasks. Basically creates instances for
	 * sets used by the class.
	 */
	private void initCommon()
	{
		// initialize the observation set
		this.observations = new HashSet<Observation>();
	}
	
	/**
	 * Provides back the metadata describing this {@link Sensor} instance.
	 * 
	 * @return The metadata as a {@link String}. It contains the detailed
	 *         description of the sensor or system. The content is open to
	 *         accommodate changes to SensorML or to support other description
	 *         languages.
	 */
	@JsonProperty(value = "Metadata")
	public String getMetadata()
	{
		return metadata;
	}
	
	/**
	 * Sets the metadata describing this {@link Sensor} instance.
	 * 
	 * @param metadata
	 *            the metadata to set, it contains the detailed description of
	 *            the sensor or system. The content is open to accommodate
	 *            changes to SensorML or to support other description languages.
	 */
	@JsonProperty(value = "Metadata")
	public void setMetadata(String metadata)
	{
		this.metadata = metadata;
	}
	
	/**
	 * Provides a Live reference to the list of events generated by this
	 * Sensor object. The underlying data structure is not Thread-safe,
	 * therefore synchronization and concurrent modification issues might arise
	 * in multi-threaded environments.
	 * 
	 * @return the live reference to the inner {@link Set} {@link Observation} .
	 */
	@JsonProperty(value = "Observations")
	public Set<Observation> getObservations()
	{
		return observations;
	}
	
	/**
	 * Updates the {@link Set} {@link Observation}  generated by this Sensor.
	 * Any previously existing information is discarded.
	 * 
	 * @param observations
	 *            the events to set.
	 */
	@JsonProperty(value = "Observations")
	public void setObservations(Set<Observation> observations)
	{
		this.observations = observations;
	}
	
	/**
	 * Adds a single {@link Observation} to the set of events generated by
	 * this device.
	 * 
	 * @param observation
	 *            The observation to add.
	 */
	public void addObservation(Observation observation)
	{
		// check not null
		if ((this.observations != null) && (observation != null))
			// add the observation
			this.observations.add(observation);
	}
	
	/**
	 * Removes a single {@link Observation} from the set of events
	 * generated by this device.
	 * 
	 * @param observation
	 *            The observation to remove.
	 * @return true if removal was successful, false otherwise
	 */
	public boolean removeObservation(Observation observation)
	{
		// the removal flag
		boolean removed = false;
		
		// check if the locations set is not null
		if (this.observations != null)
			// remove the location
			removed = this.observations.remove(observation);
		
		// return the removal result
		return removed;
	}
}