language: java
jdk: openjdk10
cache:
  directories:
  - "$HOME/.m2"
services:
  - docker
jobs:
  include:
  ###########################################################################
    - stage: "Maven Install (Unit & Integration Tests) & Docker Build & Push"
      script:
        - set -e
        - python3 --version
        - curl -O https://raw.githubusercontent.com/linksmart/ci-scripts/master/java/ci-preparation.sh
        - . ./ci-preparation.sh
        - mvn clean -B install -B
        - if [ "$TRAVIS_BRANCH" = "release" ] ; then export DISTRO="pre-release"; else export DISTRO="experimental"; fi
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker build --force-rm -f gpl-artifacts/Dockerfile-local -t linksmart/dpa:${DISTRO} .
        - docker push linksmart/dpa:${DISTRO}
        - docker build --force-rm -f Dockerfile-local -t linksmart/dpa:wso2-${DISTRO} .
        - docker push linksmart/dpa:wso2-${DISTRO}
        - docker build --force-rm -f gpl-artifacts/Dockerfile-local --build-arg extensions=eu.linksmart.services.event.ceml.core.CEML -t linksmart/la:${DISTRO} .
        - docker push linksmart/la:experimental
        - docker build --force-rm -f Dockerfile-local --build-arg extensions=eu.linksmart.services.event.ceml.core.CEML -t linksmart/la:wso2-${DISTRO} .
        - docker push linksmart/la:wso2-${DISTRO}
      install: true
      name: "Building"
  #########################
    - stage: "System Tests"
      script:
        - set -e
        - git clone https://github.com/linksmart/dpa-tutorials.git
        - |
          if [ "$TRAVIS_BRANCH" != "release" ]; then
            docker-compose -f dpa-tutorials/docker-compose.yml -f dpa-tutorials/docker-compose.tutorial.yml -f dpa-tutorials/testing/docker-compose-testing.yml up -d
          else
            docker-compose -f dpa-tutorials/docker-compose.yml -f dpa-tutorials/docker-compose.tutorial.yml  up -d
          fi
        - cd dpa-tutorials/testing/
        - curl -O https://raw.githubusercontent.com/linksmart/ci-scripts/master/java/ci-preparation.sh
        - . ./ci-preparation.sh
        - mvn test
      name: "DPA ST "
      git:
        depth: false
      install: true
      
    - stage: "System Tests"
      if: branch != release
      script:
        - set -e
        - cd  test/la-basic-it/
        - curl -O https://raw.githubusercontent.com/linksmart/ci-scripts/master/java/ci-preparation.sh
        - . ./ci-preparation.sh
        - docker-compose -f docker-compose.yml up -d
        - mvn test
      install: true
      name: "LA ST" 
  ##############################        
    - stage: "Deploy Artifacts"
      if: branch != release
      script:
        - curl -O https://raw.githubusercontent.com/linksmart/ci-scripts/master/java/ci-preparation.sh
        - . ./ci-preparation.sh
        - mvn -Dskip=test deploy -B #-Dlinksmart.commons.version=${LS_COMMONS_VERSION}-SNAPSHOT -Dskip=test -Dls.se.agents.version=${VERSION}-SNAPSHOT
      name: "Snapshot Artifacts"
      install: true
      
    - stage: "Deploy Artifacts"
      if: branch = release
      script:
        - set -e
        - curl -O https://raw.githubusercontent.com/linksmart/ci-scripts/master/java/ci-preparation.sh
        - . ./ci-preparation.sh
        - . ./maven-release.sh
      name: "Release Artifacts"
      install: true
      
    - stage: "Deploy Artifacts"
      script:
        - set -e
        - if [ "$TRAVIS_BRANCH" = "release" ] ; then export DISTRO="pre-release"; else export DISTRO="experimental"; fi
        - if [ "$TRAVIS_BRANCH" = "release" ] ; then export DISTRO_RELEASE="latest"; else export DISTRO_RELEASE="snapshot"; fi
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker pull linksmart/dpa:${DISTRO}
        - docker pull linksmart/la:${DISTRO}
        - docker pull linksmart/dpa:wso2-${DISTRO}
        - docker pull linksmart/la:wso2-${DISTRO}
        - docker tag linksmart/dpa:${DISTRO} linksmart/dpa:${DISTRO_RELEASE}
        - docker tag linksmart/la:${DISTRO} linksmart/la:${DISTRO_RELEASE}
        - docker tag linksmart/dpa:wso2-${DISTRO} linksmart/dpa:wso2-${DISTRO_RELEASE}
        - docker tag linksmart/la:wso2-${DISTRO} linksmart/la:wso2-${DISTRO_RELEASE}
        - docker push linksmart/dpa:${DISTRO_RELEASE}
        - docker push linksmart/la:${DISTRO_RELEASE}
        - docker push linksmart/dpa:wso2-${DISTRO_RELEASE}
        - docker push linksmart/la:wso2-${DISTRO_RELEASE}
      git:
        depth: false
      install: true
      name: "Docker Push Images"
      
    - stage: "Deploy Artifacts"
      if: branch != release
      script:
        - set -e
        - curl -O https://raw.githubusercontent.com/linksmart/ci-scripts/master/java/ci-preparation.sh
        - . ./ci-preparation.sh
        - mvn javadoc:javadoc #-Dls.se.agents.version=${VERSION}-SNAPSHOT
      name: "Javadoc Deploy"
      install: true
      
    - stage: "Deploy Artifacts"
      if: branch = release
      script:
        - set -e
        - curl -O https://raw.githubusercontent.com/linksmart/ci-scripts/master/java/ci-preparation.sh
        - . ./ci-preparation.sh
        - mvn site
      name: "Javadoc Deploy"
      install: true
       
    - stage: "Deploy Artifacts"
      script:
        - set -e
        - curl -O https://raw.githubusercontent.com/linksmart/ci-scripts/master/git-realocate-head.sh
        - . ./git-realocate-head.sh
        - docker-compose -f test/openAPI/docker-compose.yml up -d
        - export URL="http://localhost:8319/v2/api-docs?group=LinkSmart%20(R)%20IoT%20Data-Processing%20Agent"
        - export FILE=api-docs.json
        - echo "" > ${FILE}
        - echo 'calling endpoint ${URL} storeging in ${FILE} ...';
        - curl -f --stderr err "${URL}" | jq '.' > ${FILE};
        - cat err;
        - until [ -s ${FILE} ]; do sleep 1; echo 'calling endpoint ${URL} storeging in ${FILE} ...'; curl -f --stderr err "${URL}" | jq '.' > ${FILE}; cat err; done;
        - git add ${FILE}
        - "git commit -am '[skip travis] AUTOMATIC COMMIT: updating Open API'"
        - "git config --global user.email 'travis@travis-ci.org'"
        - "git config --global user.name 'Travis CI'"
        - "git push https://${GH_TOKEN}@github.com/linksmart/data-processing-agent.git --all"
      name: "OpenAPI GIT Push"
      install: true

